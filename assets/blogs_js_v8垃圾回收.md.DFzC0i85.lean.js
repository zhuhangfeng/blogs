import{j as r,b as i,c,q as t,f as a,K as o,w as l,a8 as d,F as p}from"./chunks/framework.DoFPn_w-.js";const k=JSON.parse('{"title":"v8垃圾回收","description":"","frontmatter":{"title":"v8垃圾回收","date":"2023-07-13T00:00:00.000Z","isShowComments":true,"categories":["js"],"tags":["js"],"sidebar":"auto"},"headers":[],"relativePath":"blogs/js/v8垃圾回收.md","filePath":"blogs/js/v8垃圾回收.md"}'),s={name:"blogs/js/v8垃圾回收.md"},n=d("",5),h=t("hr",null,null,-1),m=t("h2",{id:"新生代",tabindex:"-1"},[a("新生代： "),t("a",{class:"header-anchor",href:"#新生代","aria-label":'Permalink to "新生代："'},"​")],-1),f=t("p",null,"新生代主要用于存放存活时间较短的对象，新创建的对象也存放在新生代。",-1),_=t("p",null,"回收器工作流程如下所示：",-1),b=d("",4),u=d("",11);function T(y,w,B,g,v,O){const e=p("font");return i(),c("div",null,[n,t("p",null,[a("使用了一种称为 "),o(e,{color:"red"},{default:l(()=>[a("“分代式垃圾回收” ")]),_:1}),a("策略，根据对象的存活时间将内存的垃圾回收经行不同的分代，然后使用不同的垃圾回收算法。v8内存结构主要由"),o(e,{color:"red"},{default:l(()=>[a("新生代")]),_:1}),a("、"),o(e,{color:"red"},{default:l(()=>[a("老生代")]),_:1}),a("、大对象区、代码区、map区组成。")]),h,m,f,_,t("p",null,[a("新生代使用"),o(e,{color:"red"},{default:l(()=>[a("Scavenge（半空间）")]),_:1}),a("算法把新生代内存划分为两个区域其中处于激活状态的区域称为"),o(e,{color:"red"},{default:l(()=>[a("From空间")]),_:1}),a("、未激活的区域称为"),o(e,{color:"red"},{default:l(()=>[a("To空间")]),_:1}),a("。程序中声明的对象首先会被分配到From空间，当进新垃圾回收时，如果From空间中有存活的对象，则会复制到To空间进行保存、非存活的对象会被自动回收，当复制完成后Form空间和To空间进行互换。原来的From空间会变为新的To空间，原来的To空间会变为新的From空间。")]),b,t("p",null,[a("管理着大量的存活对象，使用"),o(e,{color:"red"},{default:l(()=>[a("Mark-Sweep（标记清除）")]),_:1}),a("和"),o(e,{color:"red"},{default:l(()=>[a("Mark-Compact（标记整理）")]),_:1}),a("进行管理。")]),u])}const C=r(s,[["render",T]]);export{k as __pageData,C as default};
