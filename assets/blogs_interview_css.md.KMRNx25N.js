import{j as i,c as l,b as a,aD as s}from"./chunks/framework.CquVR3LJ.js";const g=JSON.parse('{"title":"CSS","description":"","frontmatter":{"title":"CSS","date":"2024-3-5","categories":["interview"],"tags":["interview"]},"headers":[],"relativePath":"blogs/interview/css.md","filePath":"blogs/interview/css.md","lastUpdated":null}'),e={name:"blogs/interview/css.md"},t=s(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="行内元素、块级元素、空-void" tabindex="-1">行内元素、块级元素、空（void） <a class="header-anchor" href="#行内元素、块级元素、空-void" aria-label="Permalink to &quot;行内元素、块级元素、空（void）&quot;">​</a></h2><p>行内元素是指文档流中水平排列的元素，他们不会换行，在同一行上。只会占据自身所需的空间。</p><p>块级元素是指在文档流中独占一行的元素，会在前后都产生换行，他们会占据整个可用的宽度</p><p>空（void）元素是指没有内容的元素，他们通常用来插入一些不需要额外信息的标签.</p><ul><li>行内：a、b、span、input、img、select、strong</li><li>块：p、div、h1、ul、ol、li、dl、dt、dd</li><li>空：hr、br、img、input、link、meta</li></ul><h2 id="css3新增特性" tabindex="-1">CSS3新增特性 <a class="header-anchor" href="#css3新增特性" aria-label="Permalink to &quot;CSS3新增特性&quot;">​</a></h2><ul><li>新增css选择器、伪类</li><li>特效：text-shadow、box-shadow</li><li>线性渐变：gradient</li><li>旋转过渡：transform、transtion</li><li>动画：animation</li><li>圆角：border-radius</li></ul><h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h2><p>盒模型都是由四个部分组成的分别是margin、border、padding和content。 标准盒模型和IE盒模型的区别在于设置width和height时对应的范围不同。</p><ul><li>标准盒模型：width、height 只包含了content</li><li>IE盒模型：width、height除了content本身，还包含了border、padding。</li></ul><p>通过修改元素的box-sizing属性来改变元素的盒模型</p><ul><li>box-sizeing：content-box 表示标准盒模型（默认值）</li><li>box-sizeing：border-box 表示IE盒模型</li></ul><h2 id="css选择器和优先级" tabindex="-1">CSS选择器和优先级 <a class="header-anchor" href="#css选择器和优先级" aria-label="Permalink to &quot;CSS选择器和优先级&quot;">​</a></h2><p>选择器</p><ul><li>id选择器 #id 100</li><li>类选择器 .classname 10</li><li>属性选择器 div[class=&#39;foo&#39;] 10</li><li>伪类选择器 div::last-child 10</li><li>标签选择器 div 1</li><li>伪元素选择器 div:after 1</li><li>兄弟选择器 div-span 0</li><li>子选择器 ui&gt;li 0</li><li>后代选择器 div span 0</li><li>通配符选择器 0</li></ul><p>优先级</p><ul><li>！important</li><li>内联样式</li><li>id选择器</li><li>类选择器/伪类选择器/属性选择器</li><li>标签选择器/伪元素选择器</li><li>关系选择器/通配符选择器</li></ul><h2 id="css可继承属性和不可继承属性" tabindex="-1">CSS可继承属性和不可继承属性 <a class="header-anchor" href="#css可继承属性和不可继承属性" aria-label="Permalink to &quot;CSS可继承属性和不可继承属性&quot;">​</a></h2><p>可继承</p><ul><li>font-weight</li><li>color</li><li>font-size</li><li>line-height</li><li>cursor</li></ul><p>不可继承</p><ul><li>margin、padding、border</li><li>display</li><li>background</li><li>overflow</li><li>width、height</li><li>position</li></ul><h2 id="display的属性和作用" tabindex="-1">display的属性和作用 <a class="header-anchor" href="#display的属性和作用" aria-label="Permalink to &quot;display的属性和作用&quot;">​</a></h2><ul><li>block：块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</li><li>inline：行内元素类型。默认宽度为内容宽度，不可设置宽度，同行显示。</li><li>inline-block：行内块级元素，默认宽度为内容宽度，可以设置宽高，同行显示</li><li>table：块级表格</li><li>flex flex容器布局</li><li>none 隐藏元素</li><li>inherit：从父类继承display属性</li></ul><h2 id="隐藏元素的方式" tabindex="-1">隐藏元素的方式 <a class="header-anchor" href="#隐藏元素的方式" aria-label="Permalink to &quot;隐藏元素的方式&quot;">​</a></h2><ul><li>display:none 元素在文档中不存在，不会占据位置</li><li>visibility:hidden 元素在文档中的位置还保留，仍然占据空间</li><li>opacity：0 将透明度设置为0</li><li>z-index：负值 直接将元素放置在最下层，利用其他元素来遮盖</li><li>position：absolute 将元素定位到可视区域以外</li><li>clip-path：circle(0) 裁剪</li></ul><h2 id="单行、多行文本溢出" tabindex="-1">单行、多行文本溢出 <a class="header-anchor" href="#单行、多行文本溢出" aria-label="Permalink to &quot;单行、多行文本溢出&quot;">​</a></h2><p>单行</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   overflow:hidden;//移除隐藏</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">   text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:ellipsis;//溢出用省略号显示</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">   whtie-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:nowrap;//规定段落中的文本不进行换行</span></span></code></pre></div><p>多行</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   overflow：hidden</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">   text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：ellipsis;// 溢出用省率号显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   display：-webkit-box;//作为弹性伸缩盒子模型显示。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   -webkit-line-clamp：n ; //显示 n 行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   -webkit-box-orient：vertical;//设置伸缩盒子的子元素排列方</span></span></code></pre></div><h2 id="sass、less他们的区别是什么" tabindex="-1">sass、less他们的区别是什么？ <a class="header-anchor" href="#sass、less他们的区别是什么" aria-label="Permalink to &quot;sass、less他们的区别是什么？&quot;">​</a></h2><ul><li>编译环境不一样。sass是在服务端处理的，less是需要引入less.js来处理Less代码输出CSS到浏览器，也可以在开发服务器将Less语法编译成css文件，输出css文件到生产包目录</li><li>变量符不一样。Less是@，而Sass是$</li><li>sass支持条件语句，可以使用if()else{},for{}循环等等，而less不支持</li></ul><h2 id="link和-import的区别" tabindex="-1">link和@import的区别 <a class="header-anchor" href="#link和-import的区别" aria-label="Permalink to &quot;link和@import的区别&quot;">​</a></h2><ul><li>link可以加载css，link引入的css会被同时加载</li><li>@import导入样式，但是引入的css将在页面加载完毕后才被加载，兼容性不好</li></ul><h2 id="常见的css单位" tabindex="-1">常见的css单位 <a class="header-anchor" href="#常见的css单位" aria-label="Permalink to &quot;常见的css单位&quot;">​</a></h2><ul><li>px像素</li><li>百分比父元素，当浏览器的宽度或高度发生变化时，当前元素依据比例发生变化</li><li>em和rem，相对长度单位，em相对于父元素，rem相对于根元素</li><li>vw/vh 与视窗口有关的单位，代表视窗口的宽度。</li></ul><h2 id="px、em、rem的区别" tabindex="-1">px、em、rem的区别 <a class="header-anchor" href="#px、em、rem的区别" aria-label="Permalink to &quot;px、em、rem的区别&quot;">​</a></h2><ul><li>px固定像素单位，不会随其他元素变化而变化</li><li>em相对于父元素的单位，随父元素的变化而变化</li><li>rem相对于根元素的单位，随html的变化而变化</li></ul><h2 id="三栏布局" tabindex="-1">三栏布局 <a class="header-anchor" href="#三栏布局" aria-label="Permalink to &quot;三栏布局&quot;">​</a></h2><ul><li>利用绝对定位，左右两栏设置绝对定位，中间使用对应方向大小的margin值</li><li>利用flex布局，左右两栏固定大小，中间一栏设置flex：1</li><li>利用浮动，左右两栏设置固定大小，设置对应方向浮动，中间一栏设置左右两个方向的margin值。</li></ul><h2 id="水平垂直居中" tabindex="-1">水平垂直居中 <a class="header-anchor" href="#水平垂直居中" aria-label="Permalink to &quot;水平垂直居中&quot;">​</a></h2><ul><li><p>利用绝对定位 父元素 position:relative 子元素 position:absolute left:50% top:50% transform:translate(-50%,-50%)</p></li><li><p>利用绝对定位 父元素 position:relative 子元素 position:absolute top:0 bottom:0 left:0 right:0 margin:auto width:100px height:100px</p></li><li><p>利用flex布局 display：flex justify-content: ccenter align-items: center</p></li></ul><h2 id="flex布局的理解" tabindex="-1">flex布局的理解 <a class="header-anchor" href="#flex布局的理解" aria-label="Permalink to &quot;flex布局的理解&quot;">​</a></h2><p>flex布局是css3中的布局方式，根据不同屏幕尺寸的变化来适应大小 常用属性：</p><ul><li>flex-direction：决定主轴的方向</li><li>flex-wrap：如果一条轴线排不下，如何换行。</li><li>flex-flow: 是flex-direction属性和flex-wrap属性的简写形式，默认值为row，nowrap</li><li>justify-content: 定义项目在主轴上如何对齐</li><li>align-items：定义项目在交叉轴上如何对齐</li></ul><h2 id="flex-1表示什么" tabindex="-1">flex：1表示什么 <a class="header-anchor" href="#flex-1表示什么" aria-label="Permalink to &quot;flex：1表示什么&quot;">​</a></h2><p>flex是flex-grow、flex-shrink、flex-basis的缩写。flex：1表示占用剩余所有空间</p><h2 id="聊聊网格布局-grid-layout-和响应式布局-responsive-layout" tabindex="-1">聊聊网格布局（Grid Layout）和响应式布局（Responsive Layout） <a class="header-anchor" href="#聊聊网格布局-grid-layout-和响应式布局-responsive-layout" aria-label="Permalink to &quot;聊聊网格布局（Grid Layout）和响应式布局（Responsive Layout）&quot;">​</a></h2><ul><li><p>网格布局（Grid Layout）是一种二维布局系统，将页面划分为行和列，常用于水平和垂直居中、嵌套网络、自适应容器大小</p><ul><li>display:grid;将元素设置为网格容器</li><li>grid-template-rows：100px 200px 定义2行(第一行高100px、第二行高200px)</li><li>grid-template-columns: auto auto auto属性和3列（三列自动宽度）</li><li>grid-template-area：合并行或者列</li><li>grid-gap: 10px;设置行列的间距</li></ul></li><li><p>响应式布局（Responsive Layout）是一种设计方法，通过媒体查询（media）、相对单位和弹性布局等技术可以实现网页的响应式调整</p><ul><li>使用媒体查询根据设备的特性和屏幕尺寸应用不同的css样式</li><li>相对单位（百分比、vw、vh、rem、em）</li><li>弹性布局（flex、grid）</li></ul></li></ul><h2 id="对bfc的理解-如何创建bfc" tabindex="-1">对BFC的理解，如何创建BFC <a class="header-anchor" href="#对bfc的理解-如何创建bfc" aria-label="Permalink to &quot;对BFC的理解，如何创建BFC&quot;">​</a></h2><p>BFC是块级格式上下文，在BFC布局里面的元素不受外面元素的影响</p><p>创建BFC条件</p><ul><li>设置浮动。float有值但是不为空</li><li>设置绝对定位：position(absolute、fixed)</li><li>overfilow值为：hidden、auto、scroll</li><li>display值为：inline-block、table-cell、table-caption0</li></ul><p>BFC作用</p><ul><li>解决margin重叠问题：由于BFC是一个独立的区域，内部元素和外部元素互不影响，将两个元素变为BFC，就解决了margin重叠问题</li><li>解决高度塌陷问题</li></ul><h2 id="什么是margin重叠、如何解决" tabindex="-1">什么是margin重叠、如何解决 <a class="header-anchor" href="#什么是margin重叠、如何解决" aria-label="Permalink to &quot;什么是margin重叠、如何解决&quot;">​</a></h2><p>两个块级元素分别设置上下margin可能会导致边距合并为一个边距 两个元素都变为BFC</p><h2 id="position-常用属性-默认值是什么" tabindex="-1">position 常用属性 默认值是什么 <a class="header-anchor" href="#position-常用属性-默认值是什么" aria-label="Permalink to &quot;position 常用属性 默认值是什么&quot;">​</a></h2><ul><li>static 默认值，没有定位，元素正常在文档流中显示</li><li>relative 相对定位，相对于原来的位置进行定位</li><li>absolute 绝对定位，相对于一个父元素进行定位</li><li>fixed 绝对定位，相对于浏览器窗口</li><li>sticky 粘性定位，基于用户滚动位置</li></ul><h2 id="实现一个三角形" tabindex="-1">实现一个三角形 <a class="header-anchor" href="#实现一个三角形" aria-label="Permalink to &quot;实现一个三角形&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   border-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   border-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   border-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="画一条0-5px的线" tabindex="-1">画一条0.5px的线 <a class="header-anchor" href="#画一条0-5px的线" aria-label="Permalink to &quot;画一条0.5px的线&quot;">​</a></h2><ul><li>使用transform：scale(0.5,0.5)</li></ul><h2 id="伪元素和伪类" tabindex="-1">伪元素和伪类 <a class="header-anchor" href="#伪元素和伪类" aria-label="Permalink to &quot;伪元素和伪类&quot;">​</a></h2><ul><li><p>伪元素可以在一个元素前面或后面添加内容，通常使用::双冒号来表示伪元素</p><ul><li>::before 在元素之前插入内容</li><li>::after 在元素之后插入虚拟内容</li><li>::first-line 选择元素的第一行文本</li><li>::first-letter 选择元素的第一个字母</li></ul></li><li><p>伪类使用单冒号（:）来表示伪类</p><ul><li>:hover 鼠标悬停在元素上应用的样式</li><li>:active 元素被激活时应用的样式（通常时鼠标点击）</li><li>:first-child 选择作为父元素的第一个子元素</li><li>:nth-child() 选择指定位置的子元素</li><li>:not() 排除特定选择器匹配的元素</li></ul></li></ul>`,67),n=[t];function h(r,p,o,d,k,c){return a(),l("div",null,n)}const b=i(e,[["render",h]]);export{g as __pageData,b as default};
