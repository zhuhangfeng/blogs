import{j as o,F as s,c,K as a,w as t,f as l,q as i,aD as r,b as n,aH as d,aI as h,aJ as u}from"./chunks/framework.bY6udF85.js";const C=JSON.parse('{"title":"HTML","description":"","frontmatter":{"title":"HTML","date":"2024-3-5","categories":["interview"],"tags":["interview"]},"headers":[],"relativePath":"blogs/interview/html.md","filePath":"blogs/interview/html.md","lastUpdated":null}'),m={name:"blogs/interview/html.md"},p=i("h1",{id:"html",tabindex:"-1"},[l("HTML "),i("a",{class:"header-anchor",href:"#html","aria-label":'Permalink to "HTML"'},"​")],-1),_=i("h2",{id:"src和href的区别",tabindex:"-1"},[l("src和href的区别 "),i("a",{class:"header-anchor",href:"#src和href的区别","aria-label":'Permalink to "src和href的区别"'},"​")],-1),f=r('<ul><li><p>src：当浏览器解析到该元素时，会暂停其他资源的加载和处理，直到该资源加载完成。它会将资源内容嵌入到当前标签所在的位置，将其指向的资源下载应用到文档内，如js脚本等。常用在img、script、iframe等标签。</p></li><li><p>href：指向外部资源所在的位置，和当前元素位置建立链接，当浏览器解识别到它的指向的位置，将其下载的时候不会阻止其他资源的加载解析。常用在a、link标签。</p></li></ul><h2 id="html5新特性" tabindex="-1">HTML5新特性 <a class="header-anchor" href="#html5新特性" aria-label="Permalink to &quot;HTML5新特性&quot;">​</a></h2><ul><li>新增语义化标签： <ol><li>&lt;header&gt;：定义文档或节的页眉。</li><li>&lt;nav&gt;：定义导航链接的部分。</li><li>&lt;article&gt;：定义独立的内容区块，比如一篇文章。</li><li>&lt;section&gt;：定义文档中的节或区段。</li><li>&lt;aside&gt;：定义页面内容之外的内容，比如侧边栏。</li><li>&lt;footer&gt;：定义页面的页脚。</li><li>&lt;main&gt;：定义文档的主要内容</li><li>&lt;figure&gt;：定义独立的流内容，比如图片、表格、图表等</li><li>&lt;figcaption&gt;：为&lt;figure&gt;元素的标题。</li></ol></li><li>新增表单类型属性，email、number、时间控件、color颜色拾取器、placeholder、autofocus自动获取焦点</li><li>新增音视频标签、video、audio</li><li>新增canvas画布、websocket通信、拖拽等</li><li>新增本地储存localStorage、sessionStorage</li></ul><h2 id="对html语义化的理解" tabindex="-1">对HTML语义化的理解 <a class="header-anchor" href="#对html语义化的理解" aria-label="Permalink to &quot;对HTML语义化的理解&quot;">​</a></h2><p>根据内容来悬着合适的标签</p><ul><li>方便浏览器爬虫更好的识别内容。</li><li>有利于代码的可读性，开发者能清晰的看出网页的结构，便于团队的开发与维护</li></ul><h2 id="doctype-文档类型-的作用" tabindex="-1">DOCTYPE(文档类型)的作用 <a class="header-anchor" href="#doctype-文档类型-的作用" aria-label="Permalink to &quot;DOCTYPE(文档类型)的作用&quot;">​</a></h2><p>doctype 是HTML5中一种标准通用标记语言的文档类型声明，是用来告诉浏览器的解析器，该用什么样的方式去加载识别文档。在html5中doctype声明不支持任何参数。因此，只需要使用简单的就可以</p><h2 id="ifame有哪些优点和缺点" tabindex="-1">ifame有哪些优点和缺点？ <a class="header-anchor" href="#ifame有哪些优点和缺点" aria-label="Permalink to &quot;ifame有哪些优点和缺点？&quot;">​</a></h2><p>iframe通常用来加载外部链接，不会影响网页内容的加载</p>',10),g=i("ul",null,[i("li",null,"可以将网页原封不动的加载进来"),i("li",null,"增加代码的可用性"),i("li",null,"用来加载显示较慢的内容，如广告、视频等")],-1),q=r('<ul><li>加载的内容无法被浏览器引擎识别，对SEO不友好</li><li>会阻塞onload事件加载</li><li>会产生很多页面，不利于管理</li></ul><h2 id="canvas和svg的区别" tabindex="-1">Canvas和SVG的区别 <a class="header-anchor" href="#canvas和svg的区别" aria-label="Permalink to &quot;Canvas和SVG的区别&quot;">​</a></h2><ul><li>canvas画布，是通过JavaScript来绘制2d图，是逐像素进行渲染。</li><li>SVG矢量图，是基于XML描述的2D图形语言，每个元素都是可用的，可以为其添加事件。</li></ul><h2 id="script标签中defaer和async的区别" tabindex="-1">script标签中defaer和async的区别 <a class="header-anchor" href="#script标签中defaer和async的区别" aria-label="Permalink to &quot;script标签中defaer和async的区别&quot;">​</a></h2><p>他两个都是表示异步加载外部js脚本，不会阻碍页面的加载解析。区别</p><ul><li><p>执行顺序：有多个async标签不能保证先后加载顺序，而多个defer标签可以按先后顺序加载。</p></li><li><p>是否立即执行：async加载完脚本后会立即执行，defer是要等文档解析完成后才执行。</p></li><li><p><code>&lt;script src=&#39;xxx&#39;&gt;&lt;/script&gt;</code>：遇到script标签时会阻塞html的解析，script下载完成后会立即执行，接着再解析html <img src="'+d+'" alt="An image"></p></li><li><p><code>&lt;script src=&#39;xxx&#39; async&gt;&lt;/script&gt;</code>：遇到async时不会阻塞html的解析，等script下载完成后会暂停html的解析，执行script，执行完再解析html <img src="'+h+'" alt="An image"></p></li><li><p><code>&lt;script src=&#39;xxx&#39; defer&gt;&lt;/script&gt;</code>：遇到defer时不会阻塞html的解析，下载完script不会立即执行，等html解析完成后才会执行script <img src="'+u+'" alt="An image"></p></li></ul><h2 id="怎样添加、移除、移动、复制、创建和查找结点" tabindex="-1">怎样添加、移除、移动、复制、创建和查找结点 <a class="header-anchor" href="#怎样添加、移除、移动、复制、创建和查找结点" aria-label="Permalink to &quot;怎样添加、移除、移动、复制、创建和查找结点&quot;">​</a></h2><ul><li>添加节点 document.appendChild(dom)</li><li>移除节点 document.removeChild(dom)</li><li>移动节点 document.appendChild(targetDom)</li><li>复制节点 dom.cloneNode(true),参数true表示是否复制子节点</li><li>创建节点 document.createElement(dom)</li><li>查找节点： <ul><li>document.getElementById(&quot;elementId&quot;) id查找</li><li>document.getElementsByClassName(&quot;className&quot;) class类名查找</li><li>document.getElementsByTagName(&quot;tagName&quot;) 标签名查找</li><li>document.querySelector(&quot;selector&quot;)</li><li>document.querySelectorAll(&quot;selector&quot;)</li></ul></li></ul><h2 id="link和-import的区别" tabindex="-1">link和@import的区别 <a class="header-anchor" href="#link和-import的区别" aria-label="Permalink to &quot;link和@import的区别&quot;">​</a></h2><ul><li>link可以加载css，link引入的css会被同时加载</li><li>@import导入样式，但是引入的css将在页面加载完毕后才被加载，兼容性不好</li></ul><h2 id="重排重绘" tabindex="-1">重排重绘 <a class="header-anchor" href="#重排重绘" aria-label="Permalink to &quot;重排重绘&quot;">​</a></h2><ul><li><p>重排：浏览器渲染页面之前需要对结构进行布局的重新计算</p><ul><li>容器宽高等几何属性发生变更会触发重排</li></ul></li><li><p>重绘：将已经计算好的布局重新绘制出来</p><ul><li>样式字体非几何属性发生变更会触发重绘</li></ul></li></ul><h3 id="重排一定会重绘、重绘不一定重排" tabindex="-1">重排一定会重绘、重绘不一定重排 <a class="header-anchor" href="#重排一定会重绘、重绘不一定重排" aria-label="Permalink to &quot;重排一定会重绘、重绘不一定重排&quot;">​</a></h3><h2 id="写h5和小程序有什么相同及不同的地方吗" tabindex="-1">写H5和小程序有什么相同及不同的地方吗？ <a class="header-anchor" href="#写h5和小程序有什么相同及不同的地方吗" aria-label="Permalink to &quot;写H5和小程序有什么相同及不同的地方吗？&quot;">​</a></h2><ul><li><p>相同点：</p><ul><li>都是使用HTML、CSS、JavaScript来开发应用</li><li>跨平台在多种设备和操作系统上运行</li><li>无需安装、轻量级方便使用</li></ul></li><li><p>不同点：</p><ul><li>H5的运行环境是浏览器，小程序的运行环境是微信、支付宝等平台</li><li>开发框架</li><li>生命周期</li><li>性能</li><li>开发和维护</li></ul></li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',16);function b(x,T,k,P,v,S){const e=s("font");return n(),c("div",null,[p,_,a(e,{color:"#FF0000"},{default:t(()=>[l("src")]),_:1}),l("和"),a(e,{color:"#FF0000"},{default:t(()=>[l("href")]),_:1}),l("都是用来加载外部资源，区别 如下："),f,a(e,{color:"#FF0000"},{default:t(()=>[l("优点")]),_:1}),g,a(e,{color:"#FF0000"},{default:t(()=>[l("缺点")]),_:1}),q])}const H=o(m,[["render",b]]);export{C as __pageData,H as default};
